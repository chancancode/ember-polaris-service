{"version":3,"file":"index.js","sources":["../../src/compat/index.ts"],"sourcesContent":["import { getOwner } from '@ember/application';\nimport { assert, runInDebug } from '@ember/debug';\nimport type EmberService from '@ember/service';\nimport CoreService, {\n  type ServiceFactory,\n  isServiceFactory,\n  lookup,\n} from '../index.ts';\nimport {\n  type ServiceDecorator,\n  decoratorFor,\n  service as serviceDecorator,\n  detect,\n} from '../decorator/index.ts';\n\nexport default class Service extends CoreService {\n  static readonly isServiceFactory = true;\n\n  static create(props: object) {\n    const owner = getOwner(props);\n\n    assert(\n      `${this.name}.create() was called with an owner`,\n      owner !== undefined,\n    );\n\n    return lookup(owner, this);\n  }\n}\n\nexport function service<T>(factory: ServiceFactory<T>): ServiceDecorator<T>;\nexport function service<C extends typeof EmberService>(\n  factory: C,\n  name?: string,\n): ServiceDecorator<InstanceType<C>>;\nexport function service<T>(...args: unknown[]): ServiceDecorator<T> {\n  runInDebug(() => {\n    if (detect(args)) {\n      let error = `The compat @service decorator cannot be used without arguments.\\n`;\n\n      error += `\\n`;\n      error += `  class MyClass {\\n`;\n      error += `    @service foo;\\n`;\n      error += `    ~~~~~~~~ this is not allowed\\n`;\n      error += `  }\\n`;\n      error += `\\n`;\n\n      error += `Instead, you will need to pass the service factory as an argument:\\n`;\n\n      error += `\\n`;\n      error += `  class MyClass {\\n`;\n      error += `    @service(FooService) foo;\\n`;\n      error += `            ~~~~~~~~~~~~ this argument is required\\n`;\n      error += `  }\\n`;\n      error += `\\n`;\n\n      assert(error);\n    }\n\n    if (args.length === 0 || args.length > 2) {\n      let error = `The compat @service decorator must be called with either one or two arguments.\\n`;\n\n      error += `\\n`;\n      error += `  class MyClass {\\n`;\n      error += `    @service(FooService) foo;\\n`;\n      error += `            ~~~~~~~~~~~~ a service factory\\n`;\n      error += `\\n`;\n      error += `    @service(BarService, \"internal/bar\") bar;\\n`;\n      error += `            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ a service factory and a name\\n`;\n      error += `  }\\n`;\n      error += `\\n`;\n\n      error += `Please verify you are using the decorator correctly.`;\n\n      assert(error);\n    }\n\n    if (isServiceFactory(args[0])) {\n      if (args[1] !== undefined) {\n        let error = `The compat @service decorator is invoked with a valid `;\n        error += `ServiceFactory *and* a string name. This is unnecessary, `;\n        error += `because it will be looked up based on its value.\\n`;\n\n        error += `\\n`;\n        error += `  class MyClass {\\n`;\n        error += `    @service(FooService, \"foo\") bar;\\n`;\n        error += `                         ~~~~~ this argument is unnecessary\\n`;\n        error += `  }\\n`;\n        error += `\\n`;\n\n        error += `Please remove this extraneous string argument.`;\n\n        assert(error);\n      }\n    } else {\n      const MaybeServiceClass = args[0] as\n        | typeof EmberService\n        | null\n        | undefined;\n\n      const isEmberServiceFactory =\n        typeof MaybeServiceClass === 'function' &&\n        MaybeServiceClass.isServiceFactory;\n\n      if (!isEmberServiceFactory) {\n        let error = `The argument passed to the compat @service decorator must `;\n        error += `be either a valid ServiceFactory or classic Ember Service `;\n        error += `class, but it was neither.\\n`;\n\n        error += `\\n`;\n        error += `  class MyClass {\\n`;\n        error += `    @service(FooService) foo;\\n`;\n        error += `            ~~~~~~~~~~~~ this argument is invalid\\n`;\n        error += `  }\\n`;\n        error += `\\n`;\n\n        error += `Please verify you are using the decorator correctly.`;\n\n        assert(error);\n      }\n    }\n  });\n\n  const [factory, serviceName] = args as\n    | [ServiceFactory<T>]\n    | [typeof EmberService, string | undefined];\n\n  if (isServiceFactory<T>(factory)) {\n    return serviceDecorator(factory);\n  } else {\n    const service = (scopable: object, propertyName: string | symbol): T => {\n      const name = serviceName ?? propertyName;\n\n      assert(\n        `The compat @service decorator was used on an unsupported field ` +\n          `${String(name)}. The decorator can only be used on string fields.`,\n        typeof name !== 'symbol',\n      );\n\n      const owner = getOwner(scopable);\n\n      assert(\n        `The compat @service decorator was used on an object without an owner.` +\n          ' Did you forget to call `setOwner()`?',\n        owner !== undefined,\n      );\n\n      const result = owner.lookup(`service:${name}`) as T;\n\n      assert(\n        `The compat @service decorator was used to lookup \\`service:${name}\\` ` +\n          'but it cannot found. Did you name the field correctly?',\n        result !== undefined,\n      );\n\n      return result;\n    };\n\n    return decoratorFor(service);\n  }\n}\n"],"names":["Service","CoreService","create","props","owner","getOwner","assert","name","undefined","lookup","_defineProperty","service","args","runInDebug","detect","error","length","isServiceFactory","MaybeServiceClass","isEmberServiceFactory","factory","serviceName","serviceDecorator","scopable","propertyName","String","result","decoratorFor"],"mappings":"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"}