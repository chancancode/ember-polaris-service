{"version":3,"file":"index.js","sources":["../../src/decorator/index.ts"],"sourcesContent":["import { assert, runInDebug } from '@ember/debug';\nimport { type ServiceFactory } from '../manager.ts';\nimport { lookup } from '../primitives.ts';\nimport { getScope } from '../scope.ts';\nimport {\n  type DecoratorArgs as BabelDecoratorArgs,\n  type ServiceDecorator as BabelServiceDecorator,\n  decoratorFor as decoratorForBabel,\n  detect as detectBabel,\n} from './babel.ts';\nimport {\n  type DecoratorArgs as StageThreeDecoratorArgs,\n  type ServiceDecorator as StageThreeServiceDecorator,\n  decoratorFor as decoratorForStageThree,\n  detect as detectStageThree,\n} from './stage-three.ts';\nimport {\n  type DecoratorArgs as TypeScriptDecoratorArgs,\n  type ServiceDecorator as TypeScriptServiceDecorator,\n} from './typescript.ts';\n\nexport type DecoratorArgs = BabelDecoratorArgs | StageThreeDecoratorArgs;\n\nexport function detect(args: unknown[]): args is DecoratorArgs {\n  return detectBabel(args) || detectStageThree(args);\n}\n\ndeclare function _decorator<T>(\n  ...args: Parameters<BabelServiceDecorator<T>>\n): ReturnType<BabelServiceDecorator<T>>;\ndeclare function _decorator<T>(\n  ...args: Parameters<StageThreeServiceDecorator<T>>\n): ReturnType<StageThreeServiceDecorator<T>>;\ndeclare function _decorator<T>(\n  ...args: Parameters<TypeScriptServiceDecorator<T>>\n): ReturnType<TypeScriptServiceDecorator<T>>;\n\nexport type ServiceDecorator<T> = typeof _decorator<T>;\n\nexport function decoratorFor<T>(\n  service: (scopable: object, name: string | symbol) => T,\n): ServiceDecorator<T> {\n  function decorator(\n    ...args: BabelDecoratorArgs\n  ): ReturnType<BabelServiceDecorator<T>>;\n  function decorator(\n    ...args: StageThreeDecoratorArgs\n  ): ReturnType<StageThreeServiceDecorator<T>>;\n  function decorator(\n    ...args: TypeScriptDecoratorArgs\n  ): ReturnType<TypeScriptServiceDecorator<T>>;\n  function decorator(...args: unknown[]) {\n    if (detectBabel(args)) {\n      return decoratorForBabel(service)(...args);\n    } else if (detectStageThree(args)) {\n      return decoratorForStageThree(service)(...args);\n    }\n\n    runInDebug(() => {\n      // Babel class decorator\n      if (args.length === 1) {\n        const [klass] = args;\n\n        if (\n          typeof klass === 'function' &&\n          /^\\s*class\\s+/.test(klass.toString())\n        ) {\n          const className = klass.name ? String(klass.name) : 'MyClass';\n\n          let error = `The @service decorator cannot be used on a class.\\n`;\n          error += `\\n`;\n          error += `  @service(...) \\n`;\n          error += `  ~~~~~~~~~~~~~ this is not allowed\\n`;\n          error += `  class ${className} {\\n`;\n          error += `    ...\\n`;\n          error += `  }\\n`;\n          error += `\\n`;\n\n          error += 'Please remove the @service decorator from this class.';\n\n          assert(error);\n        }\n      }\n    });\n\n    // TypeScript experimental decorator support is type-only\n    assert('Invalid @service decorator call');\n  }\n\n  return decorator as ServiceDecorator<T>;\n}\n\nexport function service<T>(factory: ServiceFactory<T>): ServiceDecorator<T> {\n  const service = (scopable: object): T => {\n    const scope = getScope(scopable);\n\n    assert(\n      'The @service decorator was used on an object without a valid Scope set. ' +\n        'Did you forget to call `setScope()` or `setOwner()`?',\n      scope !== undefined,\n    );\n\n    return lookup(scope, factory);\n  };\n\n  return decoratorFor(service);\n}\n"],"names":["detect","args","detectBabel","detectStageThree","decoratorFor","service","decorator","decoratorForBabel","decoratorForStageThree","runInDebug","length","klass","test","toString","className","name","String","error","assert","factory","scopable","scope","getScope","undefined","lookup"],"mappings":";;;;;;AAuBO,SAASA,MAAMA,CAACC,IAAe,EAAyB;EAC7D,OAAOC,QAAW,CAACD,IAAI,CAAC,IAAIE,QAAgB,CAACF,IAAI,CAAC,CAAA;AACpD,CAAA;AAcO,SAASG,YAAYA,CAC1BC,OAAuD,EAClC;AAUrB,EAAA,SAASC,SAASA,CAAC,GAAGL,IAAe,EAAE;AACrC,IAAA,IAAIC,QAAW,CAACD,IAAI,CAAC,EAAE;AACrB,MAAA,OAAOM,cAAiB,CAACF,OAAO,CAAC,CAAC,GAAGJ,IAAI,CAAC,CAAA;AAC5C,KAAC,MAAM,IAAIE,QAAgB,CAACF,IAAI,CAAC,EAAE;AACjC,MAAA,OAAOO,cAAsB,CAACH,OAAO,CAAC,CAAC,GAAGJ,IAAI,CAAC,CAAA;AACjD,KAAA;AAEAQ,IAAAA,UAAU,CAAC,MAAM;AACf;AACA,MAAA,IAAIR,IAAI,CAACS,MAAM,KAAK,CAAC,EAAE;AACrB,QAAA,MAAM,CAACC,KAAK,CAAC,GAAGV,IAAI,CAAA;AAEpB,QAAA,IACE,OAAOU,KAAK,KAAK,UAAU,IAC3B,cAAc,CAACC,IAAI,CAACD,KAAK,CAACE,QAAQ,EAAE,CAAC,EACrC;AACA,UAAA,MAAMC,SAAS,GAAGH,KAAK,CAACI,IAAI,GAAGC,MAAM,CAACL,KAAK,CAACI,IAAI,CAAC,GAAG,SAAS,CAAA;UAE7D,IAAIE,KAAK,GAAI,CAAoD,mDAAA,CAAA,CAAA;AACjEA,UAAAA,KAAK,IAAK,CAAG,EAAA,CAAA,CAAA;AACbA,UAAAA,KAAK,IAAK,CAAmB,kBAAA,CAAA,CAAA;AAC7BA,UAAAA,KAAK,IAAK,CAAsC,qCAAA,CAAA,CAAA;UAChDA,KAAK,IAAK,CAAUH,QAAAA,EAAAA,SAAU,CAAK,IAAA,CAAA,CAAA;AACnCG,UAAAA,KAAK,IAAK,CAAU,SAAA,CAAA,CAAA;AACpBA,UAAAA,KAAK,IAAK,CAAM,KAAA,CAAA,CAAA;AAChBA,UAAAA,KAAK,IAAK,CAAG,EAAA,CAAA,CAAA;AAEbA,UAAAA,KAAK,IAAI,uDAAuD,CAAA;UAEhEC,MAAM,CAACD,KAAK,CAAC,CAAA;AACf,SAAA;AACF,OAAA;AACF,KAAC,CAAC,CAAA;;AAEF;IACAC,MAAM,CAAC,iCAAiC,CAAC,CAAA;AAC3C,GAAA;AAEA,EAAA,OAAOZ,SAAS,CAAA;AAClB,CAAA;AAEO,SAASD,OAAOA,CAAIc,OAA0B,EAAuB;EAC1E,MAAMd,OAAO,GAAIe,QAAgB,IAAQ;AACvC,IAAA,MAAMC,KAAK,GAAGC,QAAQ,CAACF,QAAQ,CAAC,CAAA;IAEhCF,MAAM,CACJ,0EAA0E,GACxE,sDAAsD,EACxDG,KAAK,KAAKE,SACZ,CAAC,CAAA;AAED,IAAA,OAAOC,MAAM,CAACH,KAAK,EAAEF,OAAO,CAAC,CAAA;GAC9B,CAAA;EAED,OAAOf,YAAY,CAACC,OAAO,CAAC,CAAA;AAC9B;;;;"}