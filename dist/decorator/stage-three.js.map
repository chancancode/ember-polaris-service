{"version":3,"file":"stage-three.js","sources":["../../src/decorator/stage-three.ts"],"sourcesContent":["import { assert, runInDebug } from '@ember/debug';\n\nconst Kinds = [\n  'class',\n  'method',\n  'getter',\n  'setter',\n  'field',\n  'accessor',\n] as const;\n\n/* eslint-disable @typescript-eslint/ban-types */\ntype ClassMethodDecorator = (\n  value: Function,\n  context: {\n    kind: 'method';\n    name: string | symbol;\n    access: { get(): unknown };\n    static: boolean;\n    private: boolean;\n    addInitializer(initializer: () => void): void;\n  },\n) => Function | void;\n\ntype ClassGetterDecorator = (\n  value: Function,\n  context: {\n    kind: 'getter';\n    name: string | symbol;\n    access: { get(): unknown };\n    static: boolean;\n    private: boolean;\n    addInitializer(initializer: () => void): void;\n  },\n) => Function | void;\n\ntype ClassSetterDecorator = (\n  value: Function,\n  context: {\n    kind: 'setter';\n    name: string | symbol;\n    access: { set(value: unknown): void };\n    static: boolean;\n    private: boolean;\n    addInitializer(initializer: () => void): void;\n  },\n) => Function | void;\n\ntype ClassFieldDecorator = (\n  value: undefined,\n  context: {\n    kind: 'field';\n    name: string | symbol;\n    access: { get(): unknown; set(value: unknown): void };\n    static: boolean;\n    private: boolean;\n  },\n) => (initialValue: unknown) => unknown | void;\n\ntype ClassDecorator = (\n  value: Function,\n  context: {\n    kind: 'class';\n    name: string | undefined;\n    addInitializer(initializer: () => void): void;\n  },\n) => Function | void;\n\ntype ClassAutoAccessorDecorator = (\n  value: {\n    get: () => unknown;\n    set: (value: unknown) => void;\n  },\n  context: {\n    kind: 'accessor';\n    name: string | symbol;\n    access: { get(): unknown; set(value: unknown): void };\n    static: boolean;\n    private: boolean;\n    addInitializer(initializer: () => void): void;\n  },\n) => {\n  get?: () => unknown;\n  set?: (value: unknown) => void;\n  init?: (initialValue: unknown) => unknown;\n} | void;\n/* eslint-enable @typescript-eslint/ban-types */\n\nexport type Decorator =\n  | ClassMethodDecorator\n  | ClassGetterDecorator\n  | ClassSetterDecorator\n  | ClassFieldDecorator\n  | ClassDecorator\n  | ClassAutoAccessorDecorator;\n\nexport type DecoratorArgs = Parameters<Decorator>;\n\nexport function detect(args: unknown[]): args is DecoratorArgs {\n  if (args.length !== 2) {\n    return false;\n  }\n\n  const [, context] = args;\n\n  if (context === null || typeof context !== 'object') {\n    return false;\n  }\n\n  return Kinds.includes(Reflect.get(context, 'kind'));\n}\n\ntype ServiceClassFieldDecoratorArgs<T> = [\n  value: undefined,\n  context: {\n    kind: 'field';\n    name: string | symbol;\n    access: { get(): T; set(value: T): void };\n    static: boolean;\n    private: boolean;\n  },\n];\n\ntype ServiceClassFieldDecoratorReturn<T> = (initialValue: undefined) => T;\n\ntype ServiceClassFieldDecorator<T> = (\n  ...args: ServiceClassFieldDecoratorArgs<T>\n) => ServiceClassFieldDecoratorReturn<T>;\n\ntype ServiceClassAutoAccessorDecoratorArgs<T> = [\n  value: {\n    get: () => T;\n    set: (value: T) => void;\n  },\n  context: {\n    kind: 'accessor';\n    name: string | symbol;\n    access: { get(): T; set(value: T): void };\n    static: boolean;\n    private: boolean;\n    addInitializer(initializer: () => void): void;\n  },\n];\n\ntype ServiceClassAutoAccessorDecoratorReturn<T> = {\n  get: () => T;\n  set?: (value: T) => void;\n  init?: (initialValue: T) => T | void;\n};\n\ntype ServiceClassAutoAccessorDecorator<T> = (\n  ...args: ServiceClassAutoAccessorDecoratorArgs<T>\n) => ServiceClassAutoAccessorDecoratorReturn<T>;\n\ntype ServiceDecoratorArgs<T> =\n  | ServiceClassFieldDecoratorArgs<T>\n  | ServiceClassAutoAccessorDecoratorArgs<T>;\n\ntype ServiceDecoratorReturn<T> =\n  | ServiceClassAutoAccessorDecoratorReturn<T>\n  | ServiceClassFieldDecoratorReturn<T>;\n\ndeclare function _decorator<T>(\n  ...args: ServiceClassFieldDecoratorArgs<T>\n): ServiceClassFieldDecoratorReturn<T>;\ndeclare function _decorator<T>(\n  ...args: ServiceClassAutoAccessorDecoratorArgs<T>\n): ServiceClassAutoAccessorDecoratorReturn<T>;\n\nexport type ServiceDecorator<T> = typeof _decorator<T>;\n\nexport type GeneralizedServiceDecorator<T> = ServiceDecorator<T> &\n  ((...args: DecoratorArgs) => never);\n\nexport function decoratorFor<T>(\n  service: (scopable: object, name: string | symbol) => T,\n): GeneralizedServiceDecorator<T> {\n  function decorator(\n    ...args: ServiceClassFieldDecoratorArgs<T>\n  ): ServiceClassFieldDecoratorReturn<T>;\n  function decorator(\n    ...args: ServiceClassAutoAccessorDecoratorArgs<T>\n  ): ServiceClassAutoAccessorDecoratorReturn<T>;\n  function decorator(...args: DecoratorArgs): never;\n  function decorator(\n    ...args: DecoratorArgs | ServiceDecoratorArgs<T>\n  ): ServiceDecoratorReturn<T> {\n    runInDebug(() => {\n      const [, context] = args;\n      const { kind, name } = context;\n\n      if (kind === 'class') {\n        const className = name ? String(name) : 'MyClass';\n\n        let error = `The @service decorator cannot be used on a class.\\n`;\n        error += `\\n`;\n        error += `  @service(...) \\n`;\n        error += `  ~~~~~~~~~~~~~ this is not allowed\\n`;\n        error += `  class ${className} {\\n`;\n        error += `    ...\\n`;\n        error += `  }\\n`;\n        error += `\\n`;\n\n        error += 'Please remove the @service decorator from this class.';\n\n        assert(error);\n      }\n\n      if (kind === 'method' || kind === 'getter' || kind === 'setter') {\n        let signature = '';\n        let label: string = kind;\n        let fieldName: string;\n\n        if (kind === 'method') {\n          fieldName = String(name) || 'someMethod';\n          signature = `${fieldName}()`;\n        } else if (kind === 'getter') {\n          fieldName = String(name) || 'someField';\n          signature = `get ${fieldName}()`;\n        } else if (kind === 'setter') {\n          fieldName = String(name) || 'someField';\n          signature = `set ${fieldName}(value)`;\n        }\n\n        if (context.static) {\n          signature = 'static ' + signature;\n          label = 'static ' + label;\n        }\n\n        let error = `The @service decorator cannot be used on a ${label}.\\n`;\n        error += `\\n`;\n        error += `  class MyClass {\\n`;\n        error += `    @service(...) ${signature} {\\n`;\n        error += `    ~~~~~~~~~~~~~ this is not allowed\\n`;\n        error += `      ...\\n`;\n        error += `    }\\n`;\n        error += `  }\\n`;\n        error += `\\n`;\n\n        error += `Please remove the @service decorator from this ${label}.`;\n\n        assert(error);\n      }\n    });\n\n    const [, context] = args;\n\n    assert('unreachable: kind=class', context.kind !== 'class');\n    assert('unreachable: kind=method', context.kind !== 'method');\n    assert('unreachable: kind=getter', context.kind !== 'getter');\n    assert('unreachable: kind=setter', context.kind !== 'setter');\n\n    const { kind, name, static: isStatic } = context;\n\n    if (kind === 'accessor') {\n      runInDebug(() => {\n        if (isStatic) {\n          const filedName = String(name) || 'someField';\n          let error = `The @service decorator cannot be used on a static accessor field.`;\n\n          error += `\\n`;\n          error += `  class MyClass {\\n`;\n          error += `    @service(...) static accessor ${filedName};\\n`;\n          error += `                  ~~~~~~ this is not allowed\\n`;\n          error += `  }\\n`;\n          error += `\\n`;\n\n          error += `Please remove the static keyword from this field.`;\n\n          assert(error);\n        }\n      });\n\n      type NonVoid<T> = T extends void ? never : T;\n      type Return = NonVoid<ReturnType<ServiceClassAutoAccessorDecorator<T>>>;\n\n      let value: T | undefined;\n\n      const get = function (this: object) {\n        if (value === undefined) {\n          value = service(this, name);\n        }\n\n        return value;\n      } satisfies Return['get'];\n\n      let set: Return['set'] | undefined;\n      let init: Return['init'] | undefined;\n\n      runInDebug(() => {\n        set = function set(this: object) {\n          const filedName = String(name) || 'someField';\n\n          let error = String(name)\n            ? `The \\`${String(name)}\\` accessor field`\n            : `This accessor field`;\n\n          error += ` is readonly. A field decorated by the @service decorator cannot be set.\\n`;\n          error += `\\n`;\n          error += `  class MyClass {\\n`;\n          error += `    @service(...) accessor ${filedName};\\n`;\n          error += `  }\\n`;\n          error += `\\n`;\n          error += `  myInstance.${filedName} = ...;\\n`;\n          error += `  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ this is not allowed\\n`;\n          error += `\\n`;\n\n          error += `Please remove this assignment.`;\n\n          assert(error);\n        };\n\n        init = function init(this: object, initialValue: unknown) {\n          if (initialValue !== undefined) {\n            const filedName = name ? String(name) : 'someField';\n            let error = `The @service decorator cannot be used on an accessor field with an initializer.`;\n\n            error += `\\n`;\n            error += `  class MyClass {\\n`;\n            error += `    @service(...) accessor ${filedName} = ...;\\n`;\n            error += `                                        ~~~~~ this is not allowed\\n`;\n            error += `  }\\n`;\n            error += `\\n`;\n\n            error += `Please remove the initializer from this field.`;\n\n            assert(error);\n          }\n        };\n      });\n\n      return { get, set, init } satisfies Return;\n    }\n\n    if (kind === 'field') {\n      runInDebug(() => {\n        if (isStatic) {\n          const filedName = name ? String(name) : 'someField';\n          let error = `The @service decorator cannot be used on a static field.`;\n\n          error += `\\n`;\n          error += `  class MyClass {\\n`;\n          error += `    @service(...) static ${filedName};\\n`;\n          error += `                  ~~~~~~ this is not allowed\\n`;\n          error += `  }\\n`;\n          error += `\\n`;\n\n          error += `Please remove the static keyword from this field.`;\n\n          assert(error);\n        }\n      });\n\n      return function (this: object, initialValue: unknown) {\n        runInDebug(() => {\n          if (initialValue !== undefined) {\n            const filedName = name ? String(name) : 'someField';\n            const _________ = filedName.replaceAll(/./g, ' ');\n\n            let error = `The @service decorator cannot be used on a field with an initializer.\\n`;\n            error += `\\n`;\n            error += `  class MyClass {\\n`;\n            error += `    @service(...) ${filedName} = ...;\\n`;\n            error += `                  ${_________} ~~~~~ this is not allowed\\n`;\n            error += `  }\\n`;\n            error += `\\n`;\n\n            error += `Please remove the initializer from this field.`;\n\n            assert(error);\n          }\n        });\n\n        return service(this, name);\n      } satisfies ReturnType<ServiceClassFieldDecorator<T>>;\n    }\n\n    assert('unreachable');\n  }\n\n  return decorator;\n}\n"],"names":["Kinds","detect","args","length","context","includes","Reflect","get","decoratorFor","service","decorator","runInDebug","kind","name","className","String","error","assert","signature","label","fieldName","static","isStatic","filedName","value","undefined","set","init","initialValue","_________","replaceAll"],"mappings":";;AAEA,MAAMA,KAAK,GAAG,CACZ,OAAO,EACP,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,OAAO,EACP,UAAU,CACF,CAAA;;AAEV;;AA2EA;;AAYO,SAASC,MAAMA,CAACC,IAAe,EAAyB;AAC7D,EAAA,IAAIA,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE;AACrB,IAAA,OAAO,KAAK,CAAA;AACd,GAAA;AAEA,EAAA,MAAM,GAAGC,OAAO,CAAC,GAAGF,IAAI,CAAA;EAExB,IAAIE,OAAO,KAAK,IAAI,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;AACnD,IAAA,OAAO,KAAK,CAAA;AACd,GAAA;AAEA,EAAA,OAAOJ,KAAK,CAACK,QAAQ,CAACC,OAAO,CAACC,GAAG,CAACH,OAAO,EAAE,MAAM,CAAC,CAAC,CAAA;AACrD,CAAA;AAgEO,SAASI,YAAYA,CAC1BC,OAAuD,EACvB;AAQhC,EAAA,SAASC,SAASA,CAChB,GAAGR,IAA6C,EACrB;AAC3BS,IAAAA,UAAU,CAAC,MAAM;AACf,MAAA,MAAM,GAAGP,OAAO,CAAC,GAAGF,IAAI,CAAA;MACxB,MAAM;QAAEU,IAAI;AAAEC,QAAAA,IAAAA;AAAK,OAAC,GAAGT,OAAO,CAAA;MAE9B,IAAIQ,IAAI,KAAK,OAAO,EAAE;QACpB,MAAME,SAAS,GAAGD,IAAI,GAAGE,MAAM,CAACF,IAAI,CAAC,GAAG,SAAS,CAAA;QAEjD,IAAIG,KAAK,GAAI,CAAoD,mDAAA,CAAA,CAAA;AACjEA,QAAAA,KAAK,IAAK,CAAG,EAAA,CAAA,CAAA;AACbA,QAAAA,KAAK,IAAK,CAAmB,kBAAA,CAAA,CAAA;AAC7BA,QAAAA,KAAK,IAAK,CAAsC,qCAAA,CAAA,CAAA;QAChDA,KAAK,IAAK,CAAUF,QAAAA,EAAAA,SAAU,CAAK,IAAA,CAAA,CAAA;AACnCE,QAAAA,KAAK,IAAK,CAAU,SAAA,CAAA,CAAA;AACpBA,QAAAA,KAAK,IAAK,CAAM,KAAA,CAAA,CAAA;AAChBA,QAAAA,KAAK,IAAK,CAAG,EAAA,CAAA,CAAA;AAEbA,QAAAA,KAAK,IAAI,uDAAuD,CAAA;QAEhEC,MAAM,CAACD,KAAK,CAAC,CAAA;AACf,OAAA;MAEA,IAAIJ,IAAI,KAAK,QAAQ,IAAIA,IAAI,KAAK,QAAQ,IAAIA,IAAI,KAAK,QAAQ,EAAE;QAC/D,IAAIM,SAAS,GAAG,EAAE,CAAA;QAClB,IAAIC,KAAa,GAAGP,IAAI,CAAA;AACxB,QAAA,IAAIQ,SAAiB,CAAA;QAErB,IAAIR,IAAI,KAAK,QAAQ,EAAE;AACrBQ,UAAAA,SAAS,GAAGL,MAAM,CAACF,IAAI,CAAC,IAAI,YAAY,CAAA;UACxCK,SAAS,GAAI,CAAEE,EAAAA,SAAU,CAAG,EAAA,CAAA,CAAA;AAC9B,SAAC,MAAM,IAAIR,IAAI,KAAK,QAAQ,EAAE;AAC5BQ,UAAAA,SAAS,GAAGL,MAAM,CAACF,IAAI,CAAC,IAAI,WAAW,CAAA;UACvCK,SAAS,GAAI,CAAME,IAAAA,EAAAA,SAAU,CAAG,EAAA,CAAA,CAAA;AAClC,SAAC,MAAM,IAAIR,IAAI,KAAK,QAAQ,EAAE;AAC5BQ,UAAAA,SAAS,GAAGL,MAAM,CAACF,IAAI,CAAC,IAAI,WAAW,CAAA;UACvCK,SAAS,GAAI,CAAME,IAAAA,EAAAA,SAAU,CAAQ,OAAA,CAAA,CAAA;AACvC,SAAA;QAEA,IAAIhB,OAAO,CAACiB,MAAM,EAAE;UAClBH,SAAS,GAAG,SAAS,GAAGA,SAAS,CAAA;UACjCC,KAAK,GAAG,SAAS,GAAGA,KAAK,CAAA;AAC3B,SAAA;AAEA,QAAA,IAAIH,KAAK,GAAI,CAA6CG,2CAAAA,EAAAA,KAAM,CAAI,GAAA,CAAA,CAAA;AACpEH,QAAAA,KAAK,IAAK,CAAG,EAAA,CAAA,CAAA;AACbA,QAAAA,KAAK,IAAK,CAAoB,mBAAA,CAAA,CAAA;QAC9BA,KAAK,IAAK,CAAoBE,kBAAAA,EAAAA,SAAU,CAAK,IAAA,CAAA,CAAA;AAC7CF,QAAAA,KAAK,IAAK,CAAwC,uCAAA,CAAA,CAAA;AAClDA,QAAAA,KAAK,IAAK,CAAY,WAAA,CAAA,CAAA;AACtBA,QAAAA,KAAK,IAAK,CAAQ,OAAA,CAAA,CAAA;AAClBA,QAAAA,KAAK,IAAK,CAAM,KAAA,CAAA,CAAA;AAChBA,QAAAA,KAAK,IAAK,CAAG,EAAA,CAAA,CAAA;QAEbA,KAAK,IAAK,CAAiDG,+CAAAA,EAAAA,KAAM,CAAE,CAAA,CAAA,CAAA;QAEnEF,MAAM,CAACD,KAAK,CAAC,CAAA;AACf,OAAA;AACF,KAAC,CAAC,CAAA;AAEF,IAAA,MAAM,GAAGZ,OAAO,CAAC,GAAGF,IAAI,CAAA;IAExBe,MAAM,CAAC,yBAAyB,EAAEb,OAAO,CAACQ,IAAI,KAAK,OAAO,CAAC,CAAA;IAC3DK,MAAM,CAAC,0BAA0B,EAAEb,OAAO,CAACQ,IAAI,KAAK,QAAQ,CAAC,CAAA;IAC7DK,MAAM,CAAC,0BAA0B,EAAEb,OAAO,CAACQ,IAAI,KAAK,QAAQ,CAAC,CAAA;IAC7DK,MAAM,CAAC,0BAA0B,EAAEb,OAAO,CAACQ,IAAI,KAAK,QAAQ,CAAC,CAAA;IAE7D,MAAM;MAAEA,IAAI;MAAEC,IAAI;AAAEQ,MAAAA,MAAM,EAAEC,QAAAA;AAAS,KAAC,GAAGlB,OAAO,CAAA;IAEhD,IAAIQ,IAAI,KAAK,UAAU,EAAE;AACvBD,MAAAA,UAAU,CAAC,MAAM;AACf,QAAA,IAAIW,QAAQ,EAAE;AACZ,UAAA,MAAMC,SAAS,GAAGR,MAAM,CAACF,IAAI,CAAC,IAAI,WAAW,CAAA;UAC7C,IAAIG,KAAK,GAAI,CAAkE,iEAAA,CAAA,CAAA;AAE/EA,UAAAA,KAAK,IAAK,CAAG,EAAA,CAAA,CAAA;AACbA,UAAAA,KAAK,IAAK,CAAoB,mBAAA,CAAA,CAAA;UAC9BA,KAAK,IAAK,CAAoCO,kCAAAA,EAAAA,SAAU,CAAI,GAAA,CAAA,CAAA;AAC5DP,UAAAA,KAAK,IAAK,CAA+C,8CAAA,CAAA,CAAA;AACzDA,UAAAA,KAAK,IAAK,CAAM,KAAA,CAAA,CAAA;AAChBA,UAAAA,KAAK,IAAK,CAAG,EAAA,CAAA,CAAA;AAEbA,UAAAA,KAAK,IAAK,CAAkD,iDAAA,CAAA,CAAA;UAE5DC,MAAM,CAACD,KAAK,CAAC,CAAA;AACf,SAAA;AACF,OAAC,CAAC,CAAA;AAKF,MAAA,IAAIQ,KAAoB,CAAA;AAExB,MAAA,MAAMjB,GAAG,GAAG,YAAwB;QAClC,IAAIiB,KAAK,KAAKC,SAAS,EAAE;AACvBD,UAAAA,KAAK,GAAGf,OAAO,CAAC,IAAI,EAAEI,IAAI,CAAC,CAAA;AAC7B,SAAA;AAEA,QAAA,OAAOW,KAAK,CAAA;OACW,CAAA;AAEzB,MAAA,IAAIE,GAA8B,CAAA;AAClC,MAAA,IAAIC,IAAgC,CAAA;AAEpChB,MAAAA,UAAU,CAAC,MAAM;AACfe,QAAAA,GAAG,GAAG,SAASA,GAAGA,GAAe;AAC/B,UAAA,MAAMH,SAAS,GAAGR,MAAM,CAACF,IAAI,CAAC,IAAI,WAAW,CAAA;AAE7C,UAAA,IAAIG,KAAK,GAAGD,MAAM,CAACF,IAAI,CAAC,GACnB,CAAQE,MAAAA,EAAAA,MAAM,CAACF,IAAI,CAAE,CAAA,iBAAA,CAAkB,GACvC,CAAoB,mBAAA,CAAA,CAAA;AAEzBG,UAAAA,KAAK,IAAK,CAA2E,0EAAA,CAAA,CAAA;AACrFA,UAAAA,KAAK,IAAK,CAAG,EAAA,CAAA,CAAA;AACbA,UAAAA,KAAK,IAAK,CAAoB,mBAAA,CAAA,CAAA;UAC9BA,KAAK,IAAK,CAA6BO,2BAAAA,EAAAA,SAAU,CAAI,GAAA,CAAA,CAAA;AACrDP,UAAAA,KAAK,IAAK,CAAM,KAAA,CAAA,CAAA;AAChBA,UAAAA,KAAK,IAAK,CAAG,EAAA,CAAA,CAAA;UACbA,KAAK,IAAK,CAAeO,aAAAA,EAAAA,SAAU,CAAU,SAAA,CAAA,CAAA;AAC7CP,UAAAA,KAAK,IAAK,CAAuD,sDAAA,CAAA,CAAA;AACjEA,UAAAA,KAAK,IAAK,CAAG,EAAA,CAAA,CAAA;AAEbA,UAAAA,KAAK,IAAK,CAA+B,8BAAA,CAAA,CAAA;UAEzCC,MAAM,CAACD,KAAK,CAAC,CAAA;SACd,CAAA;AAEDW,QAAAA,IAAI,GAAG,SAASA,IAAIA,CAAeC,YAAqB,EAAE;UACxD,IAAIA,YAAY,KAAKH,SAAS,EAAE;YAC9B,MAAMF,SAAS,GAAGV,IAAI,GAAGE,MAAM,CAACF,IAAI,CAAC,GAAG,WAAW,CAAA;YACnD,IAAIG,KAAK,GAAI,CAAgF,+EAAA,CAAA,CAAA;AAE7FA,YAAAA,KAAK,IAAK,CAAG,EAAA,CAAA,CAAA;AACbA,YAAAA,KAAK,IAAK,CAAoB,mBAAA,CAAA,CAAA;YAC9BA,KAAK,IAAK,CAA6BO,2BAAAA,EAAAA,SAAU,CAAU,SAAA,CAAA,CAAA;AAC3DP,YAAAA,KAAK,IAAK,CAAoE,mEAAA,CAAA,CAAA;AAC9EA,YAAAA,KAAK,IAAK,CAAM,KAAA,CAAA,CAAA;AAChBA,YAAAA,KAAK,IAAK,CAAG,EAAA,CAAA,CAAA;AAEbA,YAAAA,KAAK,IAAK,CAA+C,8CAAA,CAAA,CAAA;YAEzDC,MAAM,CAACD,KAAK,CAAC,CAAA;AACf,WAAA;SACD,CAAA;AACH,OAAC,CAAC,CAAA;MAEF,OAAO;QAAET,GAAG;QAAEmB,GAAG;AAAEC,QAAAA,IAAAA;OAAM,CAAA;AAC3B,KAAA;IAEA,IAAIf,IAAI,KAAK,OAAO,EAAE;AACpBD,MAAAA,UAAU,CAAC,MAAM;AACf,QAAA,IAAIW,QAAQ,EAAE;UACZ,MAAMC,SAAS,GAAGV,IAAI,GAAGE,MAAM,CAACF,IAAI,CAAC,GAAG,WAAW,CAAA;UACnD,IAAIG,KAAK,GAAI,CAAyD,wDAAA,CAAA,CAAA;AAEtEA,UAAAA,KAAK,IAAK,CAAG,EAAA,CAAA,CAAA;AACbA,UAAAA,KAAK,IAAK,CAAoB,mBAAA,CAAA,CAAA;UAC9BA,KAAK,IAAK,CAA2BO,yBAAAA,EAAAA,SAAU,CAAI,GAAA,CAAA,CAAA;AACnDP,UAAAA,KAAK,IAAK,CAA+C,8CAAA,CAAA,CAAA;AACzDA,UAAAA,KAAK,IAAK,CAAM,KAAA,CAAA,CAAA;AAChBA,UAAAA,KAAK,IAAK,CAAG,EAAA,CAAA,CAAA;AAEbA,UAAAA,KAAK,IAAK,CAAkD,iDAAA,CAAA,CAAA;UAE5DC,MAAM,CAACD,KAAK,CAAC,CAAA;AACf,SAAA;AACF,OAAC,CAAC,CAAA;MAEF,OAAO,UAAwBY,YAAqB,EAAE;AACpDjB,QAAAA,UAAU,CAAC,MAAM;UACf,IAAIiB,YAAY,KAAKH,SAAS,EAAE;YAC9B,MAAMF,SAAS,GAAGV,IAAI,GAAGE,MAAM,CAACF,IAAI,CAAC,GAAG,WAAW,CAAA;YACnD,MAAMgB,SAAS,GAAGN,SAAS,CAACO,UAAU,CAAC,IAAI,EAAE,GAAG,CAAC,CAAA;YAEjD,IAAId,KAAK,GAAI,CAAwE,uEAAA,CAAA,CAAA;AACrFA,YAAAA,KAAK,IAAK,CAAG,EAAA,CAAA,CAAA;AACbA,YAAAA,KAAK,IAAK,CAAoB,mBAAA,CAAA,CAAA;YAC9BA,KAAK,IAAK,CAAoBO,kBAAAA,EAAAA,SAAU,CAAU,SAAA,CAAA,CAAA;YAClDP,KAAK,IAAK,CAAoBa,kBAAAA,EAAAA,SAAU,CAA6B,4BAAA,CAAA,CAAA;AACrEb,YAAAA,KAAK,IAAK,CAAM,KAAA,CAAA,CAAA;AAChBA,YAAAA,KAAK,IAAK,CAAG,EAAA,CAAA,CAAA;AAEbA,YAAAA,KAAK,IAAK,CAA+C,8CAAA,CAAA,CAAA;YAEzDC,MAAM,CAACD,KAAK,CAAC,CAAA;AACf,WAAA;AACF,SAAC,CAAC,CAAA;AAEF,QAAA,OAAOP,OAAO,CAAC,IAAI,EAAEI,IAAI,CAAC,CAAA;OAC3B,CAAA;AACH,KAAA;IAEAI,MAAM,CAAC,aAAa,CAAC,CAAA;AACvB,GAAA;AAEA,EAAA,OAAOP,SAAS,CAAA;AAClB;;;;"}