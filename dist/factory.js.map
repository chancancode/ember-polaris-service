{"version":3,"file":"factory.js","sources":["../src/factory.ts"],"sourcesContent":["import {\n  type ServiceFactory,\n  type ServiceManager,\n  setServiceManager,\n  isServiceFactory,\n} from './manager.ts';\nimport { type Scope } from './scope.ts';\n\ntype Factory<T> = (scope: Scope) => T;\n\nclass FactoryServiceManager\n  implements ServiceManager<Factory<unknown>, unknown>\n{\n  constructor(private scope: Scope) {}\n\n  createService<T>(factory: Factory<T>): T {\n    return factory(this.scope);\n  }\n}\n\nconst Managers = new WeakMap<Scope, FactoryServiceManager>();\n\nfunction managerFactory(scope: Scope): FactoryServiceManager {\n  let manager = Managers.get(scope);\n\n  if (manager === undefined) {\n    manager = new FactoryServiceManager(scope);\n    Managers.set(scope, manager);\n  }\n\n  return manager;\n}\n\nexport function factory<F extends Factory<unknown>>(\n  f: F,\n): F & ServiceFactory<ReturnType<F>> {\n  if (!isServiceFactory(f)) {\n    setServiceManager(managerFactory, f);\n  }\n\n  return f as F & ServiceFactory<ReturnType<F>>;\n}\n"],"names":["FactoryServiceManager","constructor","scope","createService","factory","Managers","WeakMap","managerFactory","manager","get","undefined","set","f","isServiceFactory","setServiceManager"],"mappings":";;;;AAUA,MAAMA,qBAAqB,CAE3B;EACEC,WAAWA,CAASC,KAAY,EAAE;IAAA,IAAdA,CAAAA,KAAY,GAAZA,KAAY,CAAA;AAAG,GAAA;EAEnCC,aAAaA,CAAIC,OAAmB,EAAK;AACvC,IAAA,OAAOA,OAAO,CAAC,IAAI,CAACF,KAAK,CAAC,CAAA;AAC5B,GAAA;AACF,CAAA;AAEA,MAAMG,QAAQ,GAAG,IAAIC,OAAO,EAAgC,CAAA;AAE5D,SAASC,cAAcA,CAACL,KAAY,EAAyB;AAC3D,EAAA,IAAIM,OAAO,GAAGH,QAAQ,CAACI,GAAG,CAACP,KAAK,CAAC,CAAA;EAEjC,IAAIM,OAAO,KAAKE,SAAS,EAAE;AACzBF,IAAAA,OAAO,GAAG,IAAIR,qBAAqB,CAACE,KAAK,CAAC,CAAA;AAC1CG,IAAAA,QAAQ,CAACM,GAAG,CAACT,KAAK,EAAEM,OAAO,CAAC,CAAA;AAC9B,GAAA;AAEA,EAAA,OAAOA,OAAO,CAAA;AAChB,CAAA;AAEO,SAASJ,OAAOA,CACrBQ,CAAI,EAC+B;AACnC,EAAA,IAAI,CAACC,gBAAgB,CAACD,CAAC,CAAC,EAAE;AACxBE,IAAAA,iBAAiB,CAACP,cAAc,EAAEK,CAAC,CAAC,CAAA;AACtC,GAAA;AAEA,EAAA,OAAOA,CAAC,CAAA;AACV;;;;"}