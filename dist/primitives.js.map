{"version":3,"file":"primitives.js","sources":["../src/primitives.ts"],"sourcesContent":["import { assert, runInDebug } from '@ember/debug';\nimport {\n  type ServiceFactory,\n  instantiate,\n  isServiceFactory,\n} from './manager.ts';\nimport { type Scope, mapFor } from './scope.ts';\nimport { get } from './utils.ts';\n\nexport function lookup<T>(scope: Scope, factory: ServiceFactory<T>): T {\n  assert(\n    'The second argument passed to `lookup()` is not a valid ServiceFactory.',\n    isServiceFactory(factory),\n  );\n\n  const services = mapFor(scope, Services);\n  let service = services.get(factory) as T | undefined;\n\n  if (service === undefined) {\n    service = instantiate(scope, factoryFor(scope, factory));\n    services.set(factory, service);\n  }\n\n  return service;\n}\n\nexport function override<T>(\n  scope: Scope,\n  factory: ServiceFactory<T>,\n  override: ServiceFactory<T>,\n): void {\n  runInDebug(() => {\n    assert(\n      'The second argument passed to `override()` is not a valid ServiceFactory.',\n      isServiceFactory(factory),\n    );\n\n    assert(\n      'The third argument passed to `override()` is not a valid ServiceFactory.',\n      isServiceFactory(override),\n    );\n\n    const services = mapFor(scope, Services);\n\n    if (services.has(factory)) {\n      let label: string;\n\n      try {\n        const possibleName = get(factory, 'name');\n\n        if (typeof possibleName === 'string') {\n          label = possibleName;\n        } else {\n          label = String(factory);\n        }\n      } catch {\n        label = '(unknown service)';\n      }\n\n      assert(`Cannot override ${label} after it has already be instantiated`);\n    }\n  });\n\n  const overrides = mapFor(scope, Overrides);\n  overrides.set(factory, override);\n}\n\nfunction factoryFor<T>(\n  scope: Scope,\n  factory: ServiceFactory<T>,\n): ServiceFactory<T> {\n  const overrides = mapFor(scope, Overrides);\n  return (overrides.get(factory) ?? factory) as ServiceFactory<T>;\n}\n\ntype InstantiatedServices = WeakMap<ServiceFactory<unknown>, unknown>;\n\ntype OverriddenServices = WeakMap<\n  ServiceFactory<unknown>,\n  ServiceFactory<unknown>\n>;\n\nconst Services = new WeakMap<Scope, InstantiatedServices>();\n\nconst Overrides = new WeakMap<Scope, OverriddenServices>();\n"],"names":["lookup","scope","factory","assert","isServiceFactory","services","mapFor","Services","service","get","undefined","instantiate","factoryFor","set","override","runInDebug","has","label","possibleName","String","overrides","Overrides","WeakMap"],"mappings":";;;;;AASO,SAASA,MAAMA,CAAIC,KAAY,EAAEC,OAA0B,EAAK;AACrEC,EAAAA,MAAM,CACJ,yEAAyE,EACzEC,gBAAgB,CAACF,OAAO,CAC1B,CAAC,CAAA;AAED,EAAA,MAAMG,QAAQ,GAAGC,MAAM,CAACL,KAAK,EAAEM,QAAQ,CAAC,CAAA;AACxC,EAAA,IAAIC,OAAO,GAAGH,QAAQ,CAACI,GAAG,CAACP,OAAO,CAAkB,CAAA;EAEpD,IAAIM,OAAO,KAAKE,SAAS,EAAE;IACzBF,OAAO,GAAGG,WAAW,CAACV,KAAK,EAAEW,UAAU,CAACX,KAAK,EAAEC,OAAO,CAAC,CAAC,CAAA;AACxDG,IAAAA,QAAQ,CAACQ,GAAG,CAACX,OAAO,EAAEM,OAAO,CAAC,CAAA;AAChC,GAAA;AAEA,EAAA,OAAOA,OAAO,CAAA;AAChB,CAAA;AAEO,SAASM,QAAQA,CACtBb,KAAY,EACZC,OAA0B,EAC1BY,QAA2B,EACrB;AACNC,EAAAA,UAAU,CAAC,MAAM;AACfZ,IAAAA,MAAM,CACJ,2EAA2E,EAC3EC,gBAAgB,CAACF,OAAO,CAC1B,CAAC,CAAA;AAEDC,IAAAA,MAAM,CACJ,0EAA0E,EAC1EC,gBAAgB,CAACU,QAAQ,CAC3B,CAAC,CAAA;AAED,IAAA,MAAMT,QAAQ,GAAGC,MAAM,CAACL,KAAK,EAAEM,QAAQ,CAAC,CAAA;AAExC,IAAA,IAAIF,QAAQ,CAACW,GAAG,CAACd,OAAO,CAAC,EAAE;AACzB,MAAA,IAAIe,KAAa,CAAA;MAEjB,IAAI;AACF,QAAA,MAAMC,YAAY,GAAGT,GAAG,CAACP,OAAO,EAAE,MAAM,CAAC,CAAA;AAEzC,QAAA,IAAI,OAAOgB,YAAY,KAAK,QAAQ,EAAE;AACpCD,UAAAA,KAAK,GAAGC,YAAY,CAAA;AACtB,SAAC,MAAM;AACLD,UAAAA,KAAK,GAAGE,MAAM,CAACjB,OAAO,CAAC,CAAA;AACzB,SAAA;AACF,OAAC,CAAC,MAAM;AACNe,QAAAA,KAAK,GAAG,mBAAmB,CAAA;AAC7B,OAAA;AAEAd,MAAAA,MAAM,CAAE,CAAA,gBAAA,EAAkBc,KAAM,CAAA,qCAAA,CAAsC,CAAC,CAAA;AACzE,KAAA;AACF,GAAC,CAAC,CAAA;AAEF,EAAA,MAAMG,SAAS,GAAGd,MAAM,CAACL,KAAK,EAAEoB,SAAS,CAAC,CAAA;AAC1CD,EAAAA,SAAS,CAACP,GAAG,CAACX,OAAO,EAAEY,QAAQ,CAAC,CAAA;AAClC,CAAA;AAEA,SAASF,UAAUA,CACjBX,KAAY,EACZC,OAA0B,EACP;AACnB,EAAA,MAAMkB,SAAS,GAAGd,MAAM,CAACL,KAAK,EAAEoB,SAAS,CAAC,CAAA;AAC1C,EAAA,OAAQD,SAAS,CAACX,GAAG,CAACP,OAAO,CAAC,IAAIA,OAAO,CAAA;AAC3C,CAAA;AASA,MAAMK,QAAQ,GAAG,IAAIe,OAAO,EAA+B,CAAA;AAE3D,MAAMD,SAAS,GAAG,IAAIC,OAAO,EAA6B;;;;"}